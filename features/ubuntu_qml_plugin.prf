# The qtbase packaging for Ubuntu exports the CFLAGS, CXXFLAGS and LFLAGS
# variables in the environment before running configure so that the qtbase
# shared libraries can be compiled with the required distribution defined
# compiler flags. That is fine (though I guess that could be handled better at
# the qtbase packaging level with maybe a dedicated prf) but it results in
# qt_build_config.prf defining the QMAKE_CFLAGS, QMAKE_CXXFLAGS and QMAKE_LFLAGS
# variables with these distribution specific flags. Since we load this prf,
# these variables end up being defined when building the toolkit for development
# purpose. This is problematic because -O2 and -g are always defined (whatever
# the debug or release config chosen by the developer), also these are GCC
# specific flags which makes our build break with other compilers. This is also
# ugly because preprocessor defines are directly set in the QMAKE_C*FLAGS. In
# order to workaround these issues, we unset these variables and set the
# different flags apart from -g and -O2 in the right qmake variables. This
# allows to keep compiling with the Debian flags but in a more flexible way.
gcc:!qt_submodule_build:!debian_build {
    QMAKE_CFLAGS = -fstack-protector
    QMAKE_CXXFLAGS = -fstack-protector
    QMAKE_LFLAGS =
    QMAKE_CXXFLAGS_WARN_ON += -Wdate-time -Wformat -Werror=format-security
    QMAKE_LFLAGS_SHLIB += -Wl,-z,relro
    DEFINES += _FORTIFY_SOURCE=2
    unix:!contains(QT_CONFIG, reduce_relocations): CONFIG += bsymbolic_functions
}

load(qml_plugin)
CONFIG -= hide_symbols

load(ubuntu_enable_testing)

#hacky hacks to build the qmltypes

!qt_submodule_build {
    #should be already set by the qml_plugin.prf, but lets be safe
    isEmpty(IMPORT_VERSION): error("Must set IMPORT_VERSION")

    load(resolve_target)

    qml1_target {
        qmlplugindump = qml1plugindump
        importpath.name = QML_IMPORT_PATH
    } else {
        qmlplugindump = qmlplugindump
        importpath.name = QML2_IMPORT_PATH
    }

    qtPrepareTool(QMLPLUGINDUMP, $$qmlplugindump)
    importpath.value =
    for(qmod, QTREPOS) {
        qml1_target: \
            qmod = $$qmod/imports
        else: \
            qmod = $$qmod/qml
        exists($$qmod): importpath.value += $$shell_path($$qmod)
    }

    #add our path, somehow its not added automatically
    importpath.value += $$shell_path($$instbase)
    importpath.value = $$unique(importpath.value)

    membackend.name = ALARM_BACKEND
    membackend.value = memory

    #make sure qmlplugindump finds all libs
    ld_lib_path.name  = LD_LIBRARY_PATH
    ld_lib_path.value =
    for(qmod, QTREPOS) {
        qmod = $$qmod/lib
        exists($$qmod): ld_lib_path.value += $$shell_path($$qmod)
    }
    ld_lib_path.value += $$shell_path($$ROOT_BUILD_DIR/lib)
    ld_lib_path.value = $$unique(ld_lib_path.value)


    QMLPLUGINDUMP_ENV_VARS = importpath \
                             membackend \
                             ld_lib_path

    qtAddToolEnv(QMLPLUGINDUMP, $$QMLPLUGINDUMP_ENV_VARS)

    TARGETPATHBASE = $$replace(TARGETPATH, \\.\\d+\$, )

    QMLTYPEFILE = $$instbase/$$TARGETPATH/plugins.qmltypes
    autobld_qmltypes.target = $$QMLTYPEFILE
    autobld_qmltypes.commands = $$QMLPLUGINDUMP -nonrelocatable $$replace(TARGETPATHBASE, /, .) $$IMPORT_VERSION > $$QMLTYPEFILE
    autobld_qmltypes.commands += && sed -i \'s?-1.-1\"?0.1\"?\' $$QMLTYPEFILE
    autobld_qmltypes.commands += && sed -i \'s?exportMetaObjectRevisions: \\[-1\\]?exportMetaObjectRevisions: [0,0]?\' $$QMLTYPEFILE
    autobld_qmltypes.depends = $$QMAKE_RESOLVED_TARGET

    autobld_install_qmltypes.files = $$QMLTYPEFILE
    autobld_install_qmltypes.depends = $$QMLTYPEFILE
    autobld_install_qmltypes.path  = $$[QT_INSTALL_QML]/$$TARGETPATH
    autobld_install_qmltypes.CONFIG += no_check_exist

    INSTALLS+=autobld_install_qmltypes
    QMAKE_EXTRA_TARGETS += autobld_qmltypes
}

QMAKE_CXXFLAGS += -Werror

#do not warn for deprecated declarations
QMAKE_CXXFLAGS -= -Werror=deprecated-declarations
DEFINES -= QT_DEPRECATED_WARNINGS

