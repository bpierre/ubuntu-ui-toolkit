/*!
    \qmltype Page
    \inqmlmodule Ubuntu.Components 1.1
    \ingroup ubuntu
    \brief A page is the basic Item that must be used inside the \l MainView,
        \l PageStack and \l Tabs.
        Anchors and height of a Page are automatically determined to align with
        the header of the \l MainView, but can be overridden.

    \l MainView provides a header for Pages it includes.
    The text and actions of the header are determined by the \l title
    and \l head.actions properties of the page:

    \qml
        import QtQuick 2.0
        import Ubuntu.Components 1.1

        MainView {
            width: units.gu(48)
            height: units.gu(60)

            Page {
                title: i18n.tr("Example page")

                Label {
                    anchors.centerIn: parent
                    text: i18n.tr("Hello world!")
                }

                head.actions: [
                    Action {
                        iconName: "search"
                        text: i18n.tr("Search")
                    },
                    Action {
                        iconName: "contacts"
                        text: i18n.tr("Contacts")
                    }
                ]
            }
        }
    \endqml
    See \l MainView for more basic examples that show how to use the header.
    Advanced navigation structures can be created by adding Pages to a \l PageStack or \l Tabs.

    A Page or \l PageStack or \l Tabs inside a Page does not update the header title or actions
    to avoid confusion which Page is the active one that controls the current header title
    and actions.
*/

/*!
    \qmlproperty string Page::title
    The title of the page. Will be shown in the header of the \l MainView.
    If the page is used inside a Tab, by default it takes the title from the Tab.
    Otherwise, the default value is an empty string.
 */

/*!
    \qmlproperty Item Page::tools
    \deprecated
    The toolbar items associated with this Page.
    DEPRECATED. Use \l head.actions instead.
 */

// Cannot define qmlpropertygroup for Page::head, see
// https://bugreports.qt-project.org/browse/QTBUG-34206

/*!
    \qmlproperty list<Action> Page::head.actions
    \since Ubuntu.Components 1.1
    List of actions to show in the header.
 */

/*!
    \qmlproperty Action Page::head.backAction
    \since Ubuntu.Components 1.1
    Overrides the default \l PageStack back button and the
    \l Tabs drawer button in the header.
 */

/*!
    \qmlproperty Flickable Page::flickable
    Optional flickable that controls the header. This property
    is automatically set to the first child of the page that is Flickable
    and anchors to the top of the page or fills the page. For example:
    \qml
        import QtQuick 2.0
        import Ubuntu.Components 1.1

        MainView {
            width: units.gu(30)
            height: units.gu(50)
            Page {
                id: page
                title: "example"
                //flickable: null // uncomment to disable hiding of the header
                Flickable {
                    id: content
                    anchors.fill: parent
                    contentHeight: units.gu(70)
                    Label {
                        text: "hello"
                        anchors.centerIn: parent
                    }
                }
            }
        }
    \endqml
    In this example, page.flickable will automatically be set to content because it is
    a Flickable and it fills its parent. Thus, scrolling down in the Flickable will automatically
    hide the header.

    This property be set to null to avoid automatic flickable detection, which disables hiding
    of the header by scrolling in the Flickable. In cases where a flickable should control the header,
    but it is not automatically detected, the flickable property can be set.
 */

/*!
    \qmlproperty list<Action> Page::actions
    Local actions. These actions will be made available outside the application
    (for example, to HUD) when the Page is active. For actions that are always available
    when the application is running, use the actions property of \l MainView.
    For actions in the header, see \l head.actions.
*/
