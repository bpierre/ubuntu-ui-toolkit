/*
 * Copyright 2012 Canonical Ltd.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; version 3.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/*!
  \page theming-components.html
  \ingroup theming-description
  \title Theming Ubuntu Components
  \nextpage {Ubuntu User Interface Toolkit}

  \b{The theming is under heavy development, therefore changes may occur leaving
  the documentation out of date.}

  \section1 What is theming and why is needed?

  Theming is one of the most important aspects of a component set that is aimed
  to be fully reusable and customizable. With proper theming support both the
  look-and-feel can be changed without altering the components API or implementation.
  Creating a division between the visual implementation and the stylistic settings
  will help enforce visual consistency throughout the application and perhaps ease
  visual experimentation by designers.

  The following sample illustrates the abilities of the theming.

  Theme file (sample.qmltheme):
  \code
  @qml-mapping(.frame, , FrameDelegate);
  @qml-import(Ubuntu.Components 0.1);

  .frame {
     borderColor: "darkgray";
     radius: 10;
     fillColor: "lightgray";
     opacity: 0.8;
  }
  .pushbutton {
     color: item.hovered ? "tan" : "#757373";
  }
  \endcode

  Delegate files used by the theme providing the visuals:
  \qml
  // FrameDelegate
  import QtQuick 2.0
  import Ubuntu.Components 0.1

  Rectangle {
     anchors.fill: parent
     color: itemStyle.fillColor
     radius: itemStyle.radius
     opacity: itemStyle.opacity
     border {
        color: itemStyle.borderColor
        border.width: 2
     }
  }
  \endqml

  The PushButton document:
  \qml
  // PushButton.qml
  import QtQuick 2.0

  Item {
     id: root
     property alias hovered: mouseArea.containsMouse
     property alias pressed: mouseArea.pressed

     signal clicked

     MouseArea {
        id: mouseArea
        anchors.fill: parent
        hoverEnabled: true

        onClicked: clicked()
     }
  }
  \endqml

  Finally the main document:
  \qml
  // Main doculent
  import QtQuick 2.0
  import Ubuntu.Components 0.1

  Rectangle {
    ItemStyle.class: "frame"
    width: 100
    height: 100
    PushButton {
       width: 100
       height: 40
       anchors {
          left: parent.left
          top: parent.top
          leftMargin: 20
          topMargin: 20
       }
       ItemStyle.class: "pushbutton"
       ItemStyle.delegate: Rectangle {
          anchors.fill: parent
          color: (ItemStyle.style) ? ItemStyle.style.color : "transparent"
          radius: 25
          Text {
            anchors.centerIn: parent
            text: "Button"
          }
       }
    }
  }
  \endqml

  \section1 Theming Engine, Theming Components

  The theming used in Ubuntu Components follows this idea of changing the look-and-feel.
  Our approach on selecting items to theme is inspired by CSS stylesheets, however does
  not implement every feature of CSS format. Therefore the theme file format is also
  called QmlTheme theme file format (.qmltheme). Theme files are loaded by the components
  library upon startup before any QML element of the application would be created.
  The library loads the default theme that is set for the user in
  \c{$HOME/.config/UITK/theme.ini} file, which contains the following setting keys:
  \list
   \li - \b{theme} specifies the actual theme set for the user, more precisely the
   folder name of the theme stored under \c{/usr/share/themes} system folder (e.g. Ambiance);
   \li - \b{imports} specifies the paths where the compoments used in the theme are
   located. Multiple folders can be added to the import path and those must be
   separated with column character. These paths are then added to Qml Engine when
   the theme file is loaded. This key is optional, as paths can be specified
   using the @qml-impotr rule.
  \endlist

  Theme files are stored within a directory named \c qmltheme, within which the
  default theme files should be named default.qml or default.qmltheme.

  For example the \e Ambiance theme is located under \c{/usr/share/themes/Ambiance}
  and the default theme file therefore will be at \c{/usr/share/themes/Ambiance/qmltheme/default.qmltheme}.

  When themes are loaded, the engine builds up a map of rules to ease
  style lookup. These style rules are applied only on items which have styling
  defined using \l ItemStyle attached properties. The ItemStyle attached object will
  look after style rules based on the styling information set and based on the
  hierarchy they are nested in. Style rules can define configuration properties
  (style property), visuals (delegate property) or both.

  Style rules are identified through selectors. Selectors follow
  the syntax defined by the \l{http://www.w3.org/TR/selector.html}{W3C for CSS selectors}
  however does not provide full support.
  The supported syntax is:
  \list
   \li - element name is either the style class defined on the QML element or the
   meta class name.
   \li - element names are always prefixed with a ‘.’ character
   \li - ID selector is the \l{ItemStyle::name}{name} of the widget prefixed with ‘#’ character
   \li - hierarchy on a style rule is represented in two ways:
   \list
    \li * either with a space character in between selectors (e.g. “.Toolbar
        .PushButton”), when the style should be applied only if the widget occurs
        inside a particular widget
    \li * or with a ‘>’ character between selectors (“.Toolbar > .PushButton”), which
        is a restriction of the previous case, when a direct child relationship is
        mandated in the widget hierarchy
   \endlist
   \li - multiple selectors can share the same declaration block, by separating
   them with comma character
  \endlist

  Examples:

  1) a Rule having its selector identifying QML elements styled with class "PushButton"
  \code
  // QmlTheme rule
  .PushButton {
     ...
  }
  \endcode
  2) a Rule having its selector identifying QML elements styled with class "pushbutton"
  and named as "red"
  \code
  //QmlTheme rule
  .pushbutton#red {
     ...
  }
  \endcode
  3) a Rule having its selector identifying QML elements styled with class "PushButton"
  named as "red" and which are children of QML elements styled as class "frame"
  \code
  //QmlTheme rule
  .frame .PushButton#red {
     ...
  }
  \endcode
  4) a Rule having its selector identifying QML elements styled with class "PushButton"
  named as "red" and which are direct children of QML elements styled as class "frame"
  \code
  //QmlTheme rule
  .frame>.PushButton#red {
     ...
  }
  \endcode

  \section2 QmlTheme file format
  The QmlTheme file format uses the ideas and format of CSS stylesheets, however does
  not implement the full specification. QmlTheme files are identified through their
  extension, which is \e .qmltheme. A theme file can contain styling rules and
  so-called @-rules.

  \section3 @-rules
  @-rules are special rules, usually defined in one line ending with a semicolon
  character, which define further actions or primitives. QmlTheme defines the following
  @-rules:
  \list
   \li \b{@import url}
   \li \b{@qml-import}
   \li \b{@qml-mapping}
  \endlist

  \section4 @import rule
  Syntax:
    \code @import url(<url>);\endcode

  The rule instructs the theme engine to import an other QmlTheme file from a given
  location. The location can be relative to the current theme's folder, from an
  absolute path or from the resources.

  Examples:
  \list
   \li \code @import url("/var/shared/theme/Ambiance/qmltheme/sometheme.qmltheme");\endcode
   will import a theme from the given absolute path.
   \li \code@import url("foo/theme.qmltheme");\endcode will import a theme relative
   to the current path located under \c foo folder.
   \li \code@import url(qrc:/theme.qmltheme);\endcode will import the theme stored
   in the application resources. Note that aliases defined for the resources must
   contain the extension so the theming engine can identify the file type.
  \endlist

  \b Note: see also The url() macro.

  \section4 @qml-import() rule
  Syntax: \code@qml-import (<import-module>[,<import-path>]);\endcode

  The rule instructs the theming engine to use the \c import-module when
  creating the styling components (styles and delegates). The \c import-path
  is an optional parameter, which when specified will be added to the QML engine's
  import path list. Therefore the parameter should be specified when the imported
  module specified in \c import-module is not included in the QML Engine's import
  path.

  The engine defines three tags that can be used in \c import-path syntax. These are
  the following:
  \list
   \li \b . specifies the path relative to the current theme file
   \li \b current: specifies the current folder from where the application was launched.
   \li \b application: specifies the application's executable folder
   \li \b system: specifies the system themes folder \c{"/var/shared/themes"}
  \endlist

  Examples:
  \list
  \li \code@qml-import(Types 1.0, ./modules);\endcode will add \c{Types 1.0} to every
  QML component generated by the theme rules and will add the modules path that is relative
  to the theme file to the import path list.   
  \li \code@qml-import(some.module 1.0);\endcode will add \c{some.module} to every QML
  component generated by the theme styling rules. The module is assumed to be
  located relative to the theme file including the statement.
  \li \code@qml-import(some.module 1.0, current:/foo);\endcode will add \c{some.module}
  to every QML component generated by the theme styling rules, and will add the
  \c foo folder that is located relative to the current folder.
  \endlist

  \section4 @qml-mapping() rule
  Syntax: \code@qml-mapping(<selector>,[<Style-element>],[<Delegate-element>]);\endcode

  The rule defines the style configuration and delegate elements for a given
  \c selector, which will be used when generating Rule elements. One of the
  \c Style-element and \c Delegate-element parameters must be specified. If one
  is left out, an empty value must be specified.

  Example:
  \list
   \li \code@qml-mapping(.pushbutton, PushButtonStyle, PushButtonDelegate);\endcode
   maps \c .pushbutton selector to use \c PushButtonStyle element for styling and
   \c PushButtonDelegate for visuals.
   \li \code@qml-mapping(.frame .pushbutton, OtherStyle, );\endcode maps "\c{.frame
   .pushbutton}"
   selector to use \c OtherStyle styling. As no delegate element is given, the
   system will use the visuals defined for the \c .pushbutton selector.
  \endlist

  \section2 The url() macro
  Resources may be stored in locations that are not resolvable using Qt.resolvedUrl()
  and those can be located relative to the current theme file. For example a theme
  may have all its resources stored in a subfolder near by the theme definition file.
  This URL cannot be resolved by the Qt.resolvedUrl() function as that one resolves
  paths that are relative to application's current path. In these cases themes can
  use the \b{url()} macro, which will resolve the given path relative to the current
  theme file parsed.

  Modifying the previous example having resources under a subfolder of the theme
  named "resources". The declaration block of the pushbutton would look as follows:
  \code
  .pushbutton {
      color: "lightgray";
      frame: url("resources/button-frame.png");
      pressedColor: Qt.darker(color, 1.2);
  }
  \endcode

  \section2 Style rules
  Style rules are defined using "selectors {declaration-block}" syntax, where
  selectors define one or more selectors separated by commas, and the declaration
  block follow QML syntax to ease transfering of those to QML. \b Note: Unlike QML
  every line in the declaration block must be separated with semicolon character.

  The following example defines styling for a PushButton element identified with
  ".pushbutton"
  \code
  .pushbutton {
      color: "lightgray";
      frame: Qt.resolvedUrl("resources/button-frame.png");
      pressedColor: Qt.darker(color, 1.2);
  }
  \endcode

  Assuming the theme defines a mapping for the style called \c PushButtonStyle, the
  engine will map the property values listed in the rule using the type. In case the
  style type is not defined, the engine will create a \c QtObject using \c var property
  type for each declaration. Note that the engine does not perform any type checking
  nor check the property presence in the specified type. 

  The theming engine defines two context properties that are available for the style and
  delegate components. These context properties are:
  \list
    \li \b{item}, holding the widget or styled item properties
    \li \b{itemStyle} holding styling properties, and it is defined only if the widget
    uses delegates (visuals), therefore accessible within delegates
  \endlist

  For example, assume the PushButton widget is defined as follows:
  \qml
  Item {
      property bool hovered
      property bool pressed
  }
  \endqml
  where \a hovered specifies the hovered state and \a pressed the pressed state. The
  previous style could be modified to change the pushbutton color to lightgreen when hovered
  as follows:
  \code
  .pushbutton {
      color: item.hovered ? "lightgreen" : "lightgray";
      frame: Qt.resolvedUrl("resources/button-frame.png");
      pressedColor: Qt.darker(color, 1.2);
  }
  \endcode

  \section2 Inheritance
  One aspect that differs radically from CSS is the ability to derive selectors.
  Selectors can be built to use previous declared selectors. When so, the new
  selectors will "inherit" the properties of all derived ones. The syntax of such
  inheritance is \b{derived-selector[.base-selector]*}. The new selector can be referred without
  its derivates within the theme file, however widgets must specify all the classes
  the selector is derived from in the same order as defined in the theme (see
  example below).
  The following example defines two button styles, one deriving from the other,
  and derived one overriding one property of its base style.

  theme.qmltheme:
  \code
  .pushbutton {
      color: item.hovered ? "lightgreen" : "lightgray";
      frame: Qt.resolvedUrl("resources/button-frame.png");
      pressedColor: Qt.darker(color, 1.2);
  }
  .red-button.pushbutton {
      pressedColor: "red";
  }
  // define one more property for red-button
  .red-button {
      moreProperty: "extra";
  }
  \endcode

  Somewhere in QML...
  \qml
  Item {
      PushButton {
          text: "Normal"
      }
      PushButton {
          text: "Normal"
          // style must specify the entire selector chain with space separators
          ItemStyle.class: "red-button pushbutton"
      }
  }
  \endqml
  ... so the second PushButton will have all the properties \c .red-button and
  \c .pushbutton has, with \c .pushbutton properties overriding \c .red-button
  properties of the same name.

  The derived selector properties are built up in the following order:
  \list
  \li properties from the base selectors are collected in the order of appearance
  in the derivates list;
  \li the next base selector properties override any previous occurence of the
  same named properties;
  \li the local properties override any previous declaration of the same property;
  \li properties from previous definitions of the same selector are added without
  overriding the existing values.
  \endlist
  The following example illustrates building the properties
  \code
  .baseA {
      baseAProperty: "baseA";
  }
  // extends .baseA
  .baseA {
      baseAProperty2: "baseA2";
  }
  //define few properties
  .derived {
      property: "some base stuff";
  }
  //then derive from bases
  .derived.baseA {
      baseAProperty: "override";
  }
  \endcode
  So, derived would have properties with the following values:
  \list
  \li baseAProperty: "override"
  \li baseAProperty2: "baseA2"
  \li property: "some base stuff"
  \endlist

  Selectors can be built of as many base selectors as needed, and selectors used
  as base can also be derived ones.
  \code
  .colors {
      color: "lightgreen";
      hoveredColor: "green";
      pressedColor: "gray";
  }
  .pushbutton.colors {
      color: item.hovered ? hoveredColor : "lightgray";
      background: url(someimage.png);
  }
  // create red-button derived from pushbutton and colors
  .red-button.pushbutton.colors {
  }
  \endcode

  \section1 Styling Widgets
  Styling elements is realised using attached properties grouped in ItemStyle
  element. The component can be attached to any element that supports visuals
  (i.e. derived from Item or QQuickItem), in this way it is possible to style
  existing QML elements, as well as component library widgets.

  The main properties that define styling are the \l{ItemStyle::class}{class} and
  \l{ItemStyle::name}{name} properties. \c class property
  declares the style class to be applied, and \c name defines the unique
  identifier of the widget. Theming engine uses these properties to build up
  the selector node that identifies the widget. The format used to build it is
  \c{.<class>[#<name>]}. If neither of these are specified, but the
  widget still uses styling, the engine will apply the default style class,
  by substituting class with the meta class name (i.e. PushButton.qml this will be
  \c PushButton).

  Updating the previous example, the complete PushButton widget with style information
  would look like
  \qml
  Item {
      property bool hovered
      property bool pressed
      ItemStyle.class: "pushbutton"
  }
  \endqml

  When a widget style is located, the engine will build up the complete selector
  using the widget and its parents, considering only those parents that are styled
  for chosing the relation between them. The following example illustrates two
  situations for descendant and direct child compositors:
  \qml
  Toolbar {
      ItemStyle.class: "toolbar"
      PushButton {
      }
  }
  \endqml
  In this sample, the button will be styled using the rules defined for \a{".toolbar >
  .pushbutton"} or if not defined, according to the rules defined by \a ".pushbutton" selector.
  However, the following example will create a selector like \a{".toolbar .pushbutton"}
  as there is a non-styled element between Toolbar and Button, so PushButton is no
  longer a direct child of Toolbar.
  \qml
  Toolbar {
      ItemStyle.class: "toolbar"
      Row {
          PushButton {
          }
      }
  }
  \endqml

  \section1 Styling QML elements
  As mentioned before, attaching the ItemStyle property to QML elements can also be used
  to style them. The following example styles a Text element. There's no delegate as
  the Text element provides the visuals needed to create a Label widget.
  \code
  .label {
      fontSize: 12;
      color: "darkgray";
  }
  .red-label {
      fontSize: 12;
      color: "red";
  }
  \endcode

  \qml
  // Label.qml
  Text {
      font.pixelSize: (ItemStyle.style && ItemStyle.style.fontSize) ?
                        ItemStyle.style.fontSize : 12
      color: (ItemStyle.style && ItemStyle.style.color) ?
                        ItemStyle.style.color : "black"
  }
  \endqml
  When using the component, different styles can be applied as the following code sample
  illustrate:
  \code
  //dark gray colored text
  Label {
      ItemStyle.class: "label"
  }

  // red colored text
  Label {
      ItemStyle.class: "red-label"
  }
  \endcode

  \section1 Custom (private) Styles
  ItemStyle has two more properties which hold the style configuration properties
  and the visuals. These properties are set the theme contains styling identified by
  the selector of the widget. These properties can also be set to styling configuration
  or delegates others than the ones defined in themes.

  An example of a Label that uses a private style configuration defining font
  size to be always 14 pixels and color as blue, would look like:
  \qml
  Label {
      ItemStyle.style: QtObject {
          property real fontSize: 14
          property color color: "blue"
      }
  }
  \endqml

  A particular widget user can decide to use private styles and delegates, style
  from theme with private delegate, delegate from theme with private style, or
  just rely on the theme for both.
  A button that uses a private delegate but style from theme would look like
  \qml
  PushButton {
      id: button
      ItemStyle.delegate: Rectangle {
          anchors.fill: parent
          color: button.pressed ? button.ItemStyle.style.pressedColor : button.ItemStyle.style.color
          radius: 15
      }
  }
  \endqml

  \section1 QmlTheme theme file example
  Finally, here are some examples of QmlTheme themes.

  default.qmltheme
  \code
  @qml-mapping(.pushbutton, PushButtonStyle, PushButtonDelegate);
  @qml-import(Ubuntu.Components 0.1);

  .pushbutton {
      color: "#e3e5e8";
      shapeDark: url("artwork/ButtonShapeDark.png");
      shapeNormal: url("artwork/ButtonShape.png");
      borderIdle: url("artwork/ButtonBorderIdle.png");
      borderPressed: url("artwork/ButtonBorderPressed.png");
      borderPressed: url("artwork/ButtonBorderPressed.png");
      borderDarkIdle: url("artwork/ButtonBorderDarkIdle.png");
      borderDarkPressed: url("artwork/ButtonBorderDarkPressed.png");
  }

  .label {
      fontFamily: "Ubuntu";
      fontSize: "medium";
      color: "red";
  }
  \endcode

  theme.qmltheme
  \code
  @import url("../default.qmltheme");
  @qml-import(themes 1.0, current:/demos);
  @qml-mapping(.frame, , TestFrameDelegate);

  .pushbutton {
      color: item.hovered ? "lightgray" : "#a3e5e8";
  }

  .pushbutton#red {
      color: "red";
  }

  .frame {
      color: "tan";
  }
  \endcode

  \section1 QML elements supporting theming
  Available through:
  \code
      import Ubuntu.Components 0.1
  \endcode
  \annotatedlist theming
*/
